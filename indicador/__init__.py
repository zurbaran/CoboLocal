"""
Ejemplos de datos tomados en la accion ticket MSG
"""

def _test():
    import doctest
    doctest.testmod()
    #TODO: implementar pruebas doctest
    # ejemplos en : http://mundogeek.net/archivos/2008/09/17/pruebas-en-python/  http://magmax9.blogspot.com.es/2011/09/python-como-hacer-pruebas-1.html
    #Externalizar los test
    #doctest.testfile('example2.txt')


def MME(datos, **config):
    """
    devuelve de la lista, datos, el indicadorMME calculado
    indicedatos, es el valor del indice de las tuplas de datos al que se utiliza para calcular el indicador, por defecto 4 que corresponde al precio de cierre.

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> MME(datos)
    [('2010-01-25', 19.6), ('2010-02-01', 19.594), ('2010-03-01', 19.731), ('2010-04-01', 19.797), ('2010-05-03', 19.879), ('2010-06-01', 19.866), ('2010-07-01', 19.825), ('2010-08-02', 19.808), ('2010-09-01', 19.89), ('2010-10-01', 19.95), ('2010-11-01', 20.078), ('2010-12-01', 20.446), ('2011-01-03', 20.754), ('2011-02-01', 21.253), ('2011-03-01', 21.623), ('2011-04-01', 21.993), ('2011-05-02', 22.349), ('2011-06-01', 22.683), ('2011-07-01', 22.929), ('2011-08-01', 23.009), ('2011-09-01', 22.995), ('2011-10-03', 23.217), ('2011-11-01', 23.598), ('2011-12-01', 23.923), ('2012-01-03', 24.23), ('2012-02-01', 24.722), ('2012-03-01', 25.334), ('2012-04-02', 26.02), ('2012-05-01', 26.76), ('2012-06-01', 27.449), ('2012-07-02', 28.148)]
    """
    # para los indicadores como la Media Movil 30 en la que en los primeros 29 periodos no se puede calcular, hay que asignarles valor 0
    
    n = int(config.get('MME', 30))
    numberound=config.get('numberound', True)
    indicedatos = config.get('indicedatos', 'cierre')
    indicedatos = ('fecha', 'apertura', 'maximo', 'minimo', 'cierre', 'volumen').index(indicedatos)

    resultado = []

    k = (2.0 / (1.0 + n))
    for iMME in xrange (0, len(datos)):
        fechaMME = datos[iMME][0]
        cierreMME = datos[iMME][indicedatos]
        if iMME == 0:
            puntoMME = datos[iMME][indicedatos]# Este es el pirmer cierre de los datos historicos
        else:
            puntoMME = (cierreMME * k) + (puntoMME * (1 - k))

        if indicedatos == 5:
            resultado.append((fechaMME, int(puntoMME)))
        else:
            if numberound == True:
                resultado.append((fechaMME, round(puntoMME, 3)))
            else:
                resultado.append((fechaMME, puntoMME))

    return (resultado)


def TR(datos, **config):
    """
    True Range

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> TR(datos)
    [('2010-01-25', 0.0), ('2010-02-01', 4.41), ('2010-03-01', 3.47), ('2010-04-01', 2.17), ('2010-05-03', 3.86), ('2010-06-01', 3.06), ('2010-07-01', 3.52), ('2010-08-02', 2.39), ('2010-09-01', 1.93), ('2010-10-01', 1.42), ('2010-11-01', 3.16), ('2010-12-01', 3.92), ('2011-01-03', 2.13), ('2011-02-01', 4.92), ('2011-03-01', 3.07), ('2011-04-01', 3.39), ('2011-05-02', 1.83), ('2011-06-01', 2.26), ('2011-07-01', 1.67), ('2011-08-01', 5.09), ('2011-09-01', 2.76), ('2011-10-03', 6.16), ('2011-11-01', 5.16), ('2011-12-01', 2.08), ('2012-01-03', 2.05), ('2012-02-01', 4.8), ('2012-03-01', 2.83), ('2012-04-02', 2.43), ('2012-05-01', 3.57), ('2012-06-01', 2.78), ('2012-07-02', 2.25)]
    """
    numberound=config.get('numberound', True)

    listaTR = []
    
    for i in xrange (0, len(datos)):

        fecha, _apertura, maximo, minimo, _cierre, _volumen = datos[i]
        if i == 0:
            valorTR = 0.0 #round(max((abs(maximo - minimo), abs(maximo - cierre), abs(minimo - cierre))), 3)
        else:
            ant = i - 1
            _fechaanterior, _aperturaanterior, _maximoanterior, _minimoanterior, cierreanterior, _volumenanterior = datos[ant]
            if numberound==True:
                valorTR = round(max((abs(maximo - minimo), abs(maximo - cierreanterior), abs(minimo - cierreanterior))), 3)
            else:
                valorTR = max((abs(maximo - minimo), abs(maximo - cierreanterior), abs(minimo - cierreanterior)))

        listaTR.append((fecha, valorTR))
    assert len(listaTR) == len(datos)
    return (listaTR)


def TAR(datos, **config):
    """
    True Averange Range
    TAR = Entero

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> TAR(datos)
    [('2010-01-25', 0.0), ('2010-02-01', 2.205), ('2010-03-01', 2.627), ('2010-04-01', 2.513), ('2010-05-03', 2.782), ('2010-06-01', 2.828), ('2010-07-01', 2.927), ('2010-08-02', 2.86), ('2010-09-01', 2.757), ('2010-10-01', 2.623), ('2010-11-01', 2.672), ('2010-12-01', 2.776), ('2011-01-03', 2.726), ('2011-02-01', 2.883), ('2011-03-01', 3.102), ('2011-04-01', 3.029), ('2011-05-02', 2.912), ('2011-06-01', 2.919), ('2011-07-01', 2.762), ('2011-08-01', 2.907), ('2011-09-01', 2.853), ('2011-10-03', 3.122), ('2011-11-01', 3.353), ('2011-12-01', 3.4), ('2012-01-03', 3.321), ('2012-02-01', 3.384), ('2012-03-01', 3.434), ('2012-04-02', 3.256), ('2012-05-01', 3.291), ('2012-06-01', 3.248), ('2012-07-02', 3.278)]
    """
    n = int(config.get('TAR', 14))
    numberound=config.get('numberound', True)
    
    listaTR = TR(datos,numberound=False)
    assert len(datos) == len(listaTR)

    valoresTR = []
    listaTAR = []

    for i in xrange (0, len(listaTR)):
        assert datos[i][0] == listaTR[i][0]#Comprobamos que cohinciden las fechas

        inicio = (i + 1) - n
        if inicio < 0:
            inicio = 0

        fecha, valorTR = listaTR[i]
        valoresTR.append(valorTR)

        valorTAR = (sum(valoresTR[inicio:])) / (len(valoresTR[inicio:]))
        if numberound==True:
            listaTAR.append((fecha, round(valorTAR,3)))
        else:
            listaTAR.append((fecha, valorTAR))
            
    assert len(datos) == len(listaTAR)
    return (listaTAR)

def ATR(datos, **config):
    """
    Averange True Range
    TAR = Entero

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> ATR(datos)
    [('2010-01-25', 0.0), ('2010-02-01', 4.41), ('2010-03-01', 7.88), ('2010-04-01', 10.05), ('2010-05-03', 13.91), ('2010-06-01', 16.97), ('2010-07-01', 20.49), ('2010-08-02', 22.88), ('2010-09-01', 24.81), ('2010-10-01', 26.23), ('2010-11-01', 29.39), ('2010-12-01', 33.31), ('2011-01-03', 35.44), ('2011-02-01', 40.36), ('2011-03-01', 43.43), ('2011-04-01', 43.718), ('2011-05-02', 42.425), ('2011-06-01', 41.655), ('2011-07-01', 40.349), ('2011-08-01', 42.557), ('2011-09-01', 42.278), ('2011-10-03', 45.418), ('2011-11-01', 47.334), ('2011-12-01', 46.033), ('2012-01-03', 44.795), ('2012-02-01', 46.395), ('2012-03-01', 45.911), ('2012-04-02', 45.062), ('2012-05-01', 45.413), ('2012-06-01', 44.949), ('2012-07-02', 43.989)]
    """
    n = int(config.get('ATR', 14))
    numberound=config.get('numberound', True)
    listaTR = TR(datos,numberound=False)
    assert len(datos) == len(listaTR)

    valoresTR = []
    listaATR = []

    for i in xrange (0, len(listaTR)):
        assert datos[i][0] == listaTR[i][0]#Comprobamos que cohinciden las fechas

        fecha, valorTR = listaTR[i]
        valoresTR.append(valorTR)
        if i<=n:
            valorATR = (sum(valoresTR[0:i+1]))
        else:
            valorATR=valorATR-(valorATR/n)+valorTR

        if numberound==True:
            listaATR.append((fecha, round(valorATR,3)))
        else:
            listaATR.append((fecha, valorATR))

    assert len(datos) == len(listaATR)
    return (listaATR)


def DM(datos,**config):
    """
    Directional Move Indicator
    Formato (fecha,DM+,DM-)

    datos de prorealtime
    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> DM(datos)
    [('2010-01-25', 0.0, 0.0), ('2010-02-01', 0, 3.15), ('2010-03-01', 1.33, 0), ('2010-04-01', 0.62, 0), ('2010-05-03', 0, 1.84), ('2010-06-01', 0, 0), ('2010-07-01', 0, 0.54), ('2010-08-02', 0, 0), ('2010-09-01', 0.11, 0), ('2010-10-01', 0.74, 0), ('2010-11-01', 1.5, 0), ('2010-12-01', 2.42, 0), ('2011-01-03', 0.21, 0), ('2011-02-01', 3.9, 0), ('2011-03-01', 0, 0), ('2011-04-01', 0.5, 0), ('2011-05-02', 0, 1.07), ('2011-06-01', 0.41, 0), ('2011-07-01', 0, 0), ('2011-08-01', 0, 4.6), ('2011-09-01', 0, 0), ('2011-10-03', 2.48, 0), ('2011-11-01', 2.51, 0), ('2011-12-01', 0.58, 0), ('2012-01-03', 0, 0.34), ('2012-02-01', 3.49, 0), ('2012-03-01', 1.16, 0), ('2012-04-02', 1.53, 0), ('2012-05-01', 2.72, 0), ('2012-06-01', 0, 0.38), ('2012-07-02', 1.84, 0)]
    """
    listaDM = []
    numberound=config.get('numberound', True)

    for i in xrange (0, len(datos)):

        fecha, _apertura, maximo, minimo, _cierre, _volumen = datos[i]
        if i == 0:
            listaDM.append((fecha, 0.0, 0.0))
        else:
            ant = i - 1
            _fechaanterior, _aperturaanterior, maximoanterior, minimoanterior, _cierreanterior, _volumenanterior = datos[ant]

            if numberound == True:
                deltamaximo = max(0, round(maximo - maximoanterior, 3))
                deltaminimo = max(0, round(minimoanterior - minimo, 3))
            else:
                deltamaximo = max(0, maximo - maximoanterior)
                deltaminimo = max(0, minimoanterior - minimo)
                

            if (deltamaximo == 0 and deltaminimo == 0) or deltamaximo == deltaminimo:
                deltamaximo = 0
                deltaminimo = 0
            elif deltamaximo > deltaminimo:
                deltaminimo = 0
            elif deltamaximo < deltaminimo:
                deltamaximo = 0

            listaDM.append((fecha, deltamaximo, deltaminimo))

    assert len(listaDM) == len(datos)
    return (listaDM)


def ADM(datos, **config):
    """
    Average Directional Move Indicator
    periodos = Entero
    Formato (fecha,ADM+,ADM-)

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> ADM(datos)
    [('2010-01-25', 0.0, 0.0), ('2010-02-01', 0.0, 1.575), ('2010-03-01', 0.443, 1.05), ('2010-04-01', 0.487, 0.787), ('2010-05-03', 0.39, 0.998), ('2010-06-01', 0.325, 0.832), ('2010-07-01', 0.279, 0.79), ('2010-08-02', 0.244, 0.691), ('2010-09-01', 0.229, 0.614), ('2010-10-01', 0.28, 0.553), ('2010-11-01', 0.391, 0.503), ('2010-12-01', 0.56, 0.461), ('2011-01-03', 0.533, 0.425), ('2011-02-01', 0.774, 0.395), ('2011-03-01', 0.774, 0.395), ('2011-04-01', 0.809, 0.17), ('2011-05-02', 0.714, 0.246), ('2011-06-01', 0.699, 0.246), ('2011-07-01', 0.699, 0.115), ('2011-08-01', 0.699, 0.444), ('2011-09-01', 0.699, 0.405), ('2011-10-03', 0.876, 0.405), ('2011-11-01', 1.048, 0.405), ('2011-12-01', 1.036, 0.405), ('2012-01-03', 0.929, 0.429), ('2012-02-01', 1.006, 0.429), ('2012-03-01', 1.074, 0.429), ('2012-04-02', 0.904, 0.429), ('2012-05-01', 1.099, 0.429), ('2012-06-01', 1.063, 0.456), ('2012-07-02', 1.194, 0.38)]
    """
    n = int(config.get('ADM', 14))
    numberound=config.get('numberound', True)
    
    listaDM = DM(datos,numberound=False)

    assert len(datos) == len(listaDM)#Comprobamos que tienen la misma cantidad de datos

    listaADM = []
    #valorADMas=0.0
    #valorADMenos=0.0

    valoresDMas=[]
    valoresDMenso=[]
    
    for i in xrange(0, len(listaDM)):
        assert datos[i][0] == listaDM[i][0]#Comprobamos que cohinciden las fechas

        inicio = (i + 1) - n
        if inicio < 0:
            inicio = 0

        fecha, valorDMas, valorDMenos = listaDM[i]
        valoresDMas.append(valorDMas)
        valoresDMenso.append(valorDMenos)
        
##        if i<=n:
##            valorADMas=valorADMas+valorDMas
##            valorADMenos=valorADMenos+valorDMenos
##        else:
##            valorADMas=valorADMas-(valorADMas/n)+valorDMas
##            valorADMenos=valorADMenos-(valorADMenos/n)+valorDMenos
        
        valorADMas = (sum(valoresDMas[inicio:])) / (len(valoresDMas[inicio:]))
        valorADMenos = (sum(valoresDMenso[inicio:])) / (len(valoresDMenso[inicio:]))

        if numberound==True:
            listaADM.append((fecha, round(valorADMas,3), round(valorADMenos,3)))
        else:
            listaADM.append((fecha, valorADMas, valorADMenos))
##        if i <= n:
##            listaADM.append((fecha, listaDM[i][1] * (1 / n), listaDM[i][2] * (1 / n)))
##        else:
##            listaADMultimo=listaADM[-1]
##            listaADM.append((fecha,
##                             (listaADMultimo[1] * (n - 1 / n)) + (listaDM[i][1] * (1 / n)),
##                             (listaADMultimo[2] * (n - 1 / n)) + (listaDM[i][2] * (1 / n))))

    assert len(datos) == len(listaADM)#Comprobamos que el resultado contiene la misma cantidad de datos que el origen
    return (listaADM)


def DI(datos, **config):
    """
    Directional Index
    Formato (fecha,DI+,DI-)

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> DI(datos)
    [('2010-01-25', 0.0, 0.0), ('2010-02-01', 0.0, 71.429), ('2010-03-01', 16.878, 39.975), ('2010-04-01', 19.403, 31.343), ('2010-05-03', 14.019, 35.873), ('2010-06-01', 11.491, 29.405), ('2010-07-01', 9.517, 26.989), ('2010-08-02', 8.523, 24.17), ('2010-09-01', 8.303, 22.289), ('2010-10-01', 10.675, 21.083), ('2010-11-01', 14.631, 18.816), ('2010-12-01', 20.174, 16.602), ('2011-01-03', 19.554, 15.604), ('2011-02-01', 26.833, 13.702), ('2011-03-01', 24.937, 12.733), ('2011-04-01', 26.715, 5.612), ('2011-05-02', 24.528, 8.462), ('2011-06-01', 23.96, 8.443), ('2011-07-01', 25.317, 4.163), ('2011-08-01', 24.054, 15.258), ('2011-09-01', 24.512, 14.196), ('2011-10-03', 28.071, 12.972), ('2011-11-01', 31.253, 12.079), ('2011-12-01', 30.483, 11.912), ('2012-01-03', 27.985, 12.928), ('2012-02-01', 29.723, 12.687), ('2012-03-01', 31.267, 12.503), ('2012-04-02', 27.775, 13.186), ('2012-05-01', 33.377, 13.043), ('2012-06-01', 32.725, 14.053), ('2012-07-02', 36.435, 11.593)]
    """
    n = int(config.get('DI', 14))
    numberound=config.get('numberound', True)
    listaADM = ADM(datos,ADM=n,numberound=False)
    listaTAR = TAR(datos,TAR=n,numberound=False)

    listaDI = []

    assert len(datos) == len(listaADM) and len(datos) == len(listaTAR)#Comprobamos que tienen la misma cantidad de datos

    for i in xrange(0, len(datos)):

        assert datos[i][0] == listaADM[i][0] and datos[i][0] == listaTAR[i][0]#Comprobamos que cohinciden las fechas

        fecha = datos[i][0]

        try:
            DImas = (listaADM[i][1] / listaTAR[i][1]) * 100
        except ZeroDivisionError:
            DImas = 0.0
        try:
            Dimenos = (listaADM[i][2] / listaTAR[i][1]) * 100
        except ZeroDivisionError:
            Dimenos = 0.0

        if numberound==True:
            listaDI.append((fecha, round(DImas,3), round(Dimenos,3)))
        else:
            listaDI.append((fecha, DImas, Dimenos))

    assert len(datos) == len(listaDI)#Comprobamos que el resultado contiene la misma cantidad de datos que el origen
    return (listaDI)


def DX(datos, **config):
    """
    Directional Movement Index

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> DX(datos)
    [('2010-01-25', 0.0), ('2010-02-01', 100.0), ('2010-03-01', 40.625), ('2010-04-01', 23.529), ('2010-05-03', 43.804), ('2010-06-01', 43.804), ('2010-07-01', 47.861), ('2010-08-02', 47.861), ('2010-09-01', 45.718), ('2010-10-01', 32.773), ('2010-11-01', 12.513), ('2010-12-01', 9.714), ('2011-01-03', 11.236), ('2011-02-01', 32.396), ('2011-03-01', 32.396), ('2011-04-01', 65.281), ('2011-05-02', 48.699), ('2011-06-01', 47.885), ('2011-07-01', 71.754), ('2011-08-01', 22.375), ('2011-09-01', 26.649), ('2011-10-03', 36.789), ('2011-11-01', 44.248), ('2011-12-01', 43.806), ('2012-01-03', 36.803), ('2012-02-01', 40.169), ('2012-03-01', 42.871), ('2012-04-02', 35.619), ('2012-05-01', 43.806), ('2012-06-01', 39.915), ('2012-07-02', 51.724)]
    """
    n = int(config.get('DX', 14))
    numberound=config.get('numberound', True)
    listaDI = DI(datos,DI=n,numberound=False)
    listaDX = []

    assert len(datos) == len(listaDI)#Comprobamos que tienen la misma cantidad de datos


    for i in xrange(0, len(datos)):

        assert datos[i][0] == listaDI[i][0]#Comprobamos que cohinciden las fechas

        fecha = datos[i][0]
        try:
            DX = ((abs(listaDI[i][1] - listaDI[i][2])) / (listaDI[i][1] + listaDI[i][2])) * 100
        except ZeroDivisionError:
            DX = 0
        if numberound==True:
            listaDX.append((fecha, round(DX,3)))
        else:
            listaDX.append((fecha, DX))

    assert len(datos) == len(listaDX)#Comprobamos que el resultado contiene la misma cantidad de datos que el origen
    return (listaDX)


def ADX(datos, **config):
    """
    Average Directional Movement Index

    >>> datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    >>> ADX(datos)
    [('2010-01-25', 0.0), ('2010-02-01', 0.0), ('2010-03-01', 0.0), ('2010-04-01', 0.0), ('2010-05-03', 0.0), ('2010-06-01', 0.0), ('2010-07-01', 0.0), ('2010-08-02', 0.0), ('2010-09-01', 0.0), ('2010-10-01', 0.0), ('2010-11-01', 0.0), ('2010-12-01', 0.0), ('2011-01-03', 0.0), ('2011-02-01', 0.0), ('2011-03-01', 0.0), ('2011-04-01', 0.0), ('2011-05-02', 0.0), ('2011-06-01', 0.0), ('2011-07-01', 0.0), ('2011-08-01', 0.0), ('2011-09-01', 0.0), ('2011-10-03', 0.0), ('2011-11-01', 0.0), ('2011-12-01', 0.0), ('2012-01-03', 0.0), ('2012-02-01', 0.0), ('2012-03-01', 0.0), ('2012-04-02', 42.525), ('2012-05-01', 42.616), ('2012-06-01', 42.423), ('2012-07-02', 43.088)]
    """
    n = config.get('ADX', 14)
    numberound=config.get('numberound', True)
    listaDX = DX(datos, DX=n,numberound=False)
    assert len(datos) == len(listaDX)
    listaADX = []
    valoresDX=[]

    for i in xrange(0, len(datos)):

        assert datos[i][0] == listaDX[i][0]

        fecha, valorDX = listaDX[i]
        valoresDX.append(valorDX)
        
        if i < (n*2)-1:
            ADX=0.0
        elif i==((n*2)-1):
            ADX=sum(valoresDX[(i + 1) - n:])/n    
        else:
            ADX=(((ADX*(n-1))+listaDX[i][1]))/n
            

        if numberound==True:
            listaADX.append((fecha, round(ADX,3)))
        else:
            listaADX.append((fecha, ADX))

    assert len(datos) == len(listaADX)
    return (listaADX)


def Averange(datos, **config):
    """
    Averange de cualquier indicador
    periodos = Entero
    indicador
    """
    n = int(config.get('periodos', 10))
    indicador = str(config.get('indicador', 'TR'))
    numberound=config.get('numberound', True)

    # inplementar funcion Averange para hacer una funcion que calcule el promedio de cualquier indicador
    if indicador == 'TR':
        listaTR = TR(datos)
    elif indicador == 'DM':
        listaTR = DM(datos)

    listaTAR = []

    assert len(datos) == len(listaTR)#Comprobamos que tienen la misma cantidad de datos

    for i in xrange(0, len(datos)):

        assert datos[i][0] == listaTR[i][0]#Comprobamos que cohinciden las fechas

        fecha = datos[i][0]
        if i == 0:
            listaTAR.append((fecha, listaTR[0] * (1 / n)))
        else:
            listaTARanterior = listaTAR[-1]
            listaTAR.append((fecha, (listaTARanterior * (n - 1 / n)) + (listaTR[i] * (1 / n))))

    assert len(datos) == len(listaTAR)#Comprobamos que el resultado contiene la misma cantidad de datos que el origen
    return (listaTAR)


if __name__ == '__main__':
    datos = [('2010-01-25', 20.0, 23.04, 19.5, 19.6, 706800), ('2010-02-01', 20.7, 20.76, 16.35, 19.5, 1385900), ('2010-03-01', 19.63, 22.09, 18.62, 21.73, 470300), ('2010-04-01', 21.79, 22.71, 20.54, 20.75, 391000), ('2010-05-03', 20.7, 22.56, 18.7, 21.07, 362800), ('2010-06-01', 21.04, 21.99, 18.93, 19.67, 240300), ('2010-07-01', 19.73, 21.91, 18.39, 19.24, 538400), ('2010-08-02', 19.39, 21.09, 18.7, 19.55, 286200), ('2010-09-01', 19.79, 21.2, 19.27, 21.09, 208400), ('2010-10-01', 21.1, 21.94, 20.52, 20.81, 205100), ('2010-11-01', 20.84, 23.44, 20.28, 21.94, 281400), ('2010-12-01', 22.36, 25.86, 22.35, 25.78, 286800), ('2011-01-03', 25.94, 26.07, 23.94, 25.22, 214200), ('2011-02-01', 25.4, 29.97, 25.05, 28.49, 303500), ('2011-03-01', 28.73, 29.71, 26.64, 26.99, 467900), ('2011-04-01', 27.11, 30.21, 26.82, 27.35, 336100), ('2011-05-02', 27.34, 27.58, 25.75, 27.51, 294000), ('2011-06-01', 27.42, 27.99, 25.73, 27.53, 254500), ('2011-07-01', 27.39, 27.97, 26.3, 26.5, 299400), ('2011-08-01', 26.79, 26.79, 21.7, 24.16, 475100), ('2011-09-01', 24.21, 24.8, 22.04, 22.8, 247800), ('2011-10-03', 22.6, 27.28, 21.12, 26.43, 350200), ('2011-11-01', 25.88, 29.79, 24.63, 29.12, 424700), ('2011-12-01', 29.0, 30.37, 28.29, 28.64, 279400), ('2012-01-03', 28.88, 30.0, 27.95, 28.69, 200300), ('2012-02-01', 28.78, 33.49, 28.74, 31.85, 452200), ('2012-03-01', 31.88, 34.65, 31.82, 34.2, 399500), ('2012-04-02', 34.05, 36.18, 33.75, 35.97, 330500), ('2012-05-01', 35.92, 38.9, 35.33, 37.49, 320800), ('2012-06-01', 36.95, 37.73, 34.95, 37.44, 214200), ('2012-07-02', 37.39, 39.57, 37.32, 38.28, 203300)]
    _test()
